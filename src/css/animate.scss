/*
* SCSS Animations for Icons
*
* This file contains a collection of keyframe animations and associated classes
* to apply various animations to icons with the prefix 'tg-'.
* The animations include : 
* beat, beat-fade, bounce, fade, flip, shake, spin, spin-reverse, spin-pulse, swing, jello, rubberBand
*
* Usage into element:
* - Add the class 'tg-effect-<animation>' to your icon element to apply an animation.
* - Add the class 'tg-effect-<animation>-hover' to apply the animation on hover.
*
* Usage in parent animated element:
* - Add the class 'tg-parent-hover' to your element parent to apply an animation on icon when to hover you.
*
* Modifiers:
* - Use '.tg-animate-delay-Xs' to set animation delay, where X is the delay in seconds [1 to 10] and -faster / -fast.
* - Use '.tg-animate-duration-Xs' to set animation duration, where X is the duration in seconds [1 to 10] and -faster / -fast.
* - Use '.tg-animate-count-X' to set the number of animation iterations, where X is the count [0 to 10].
*
* Modifiers special:
* - 'tg-animate-delay-faster', 'tg-animate-duration-faster' set time to 0.5s
* - 'tg-animate-delay-fast', 'tg-animate-duration-fast' set time to 0.8s
* - 'tg-animate-count-infinite' set itaration infinite
*
* Example:
* <i class="fa fa-plus tg-beat-infinite"></i>
* <i class="fa fa-plus tg-beat-hover"></i>

* <button class="tg-animate-hover">
*   <i class="fa fa-plus tg-beat"></i>
* </button>
*/


/* Delay classes */
.tg-animate-delay-faster {
    animation-delay: 0.5s !important;
}
.tg-animate-delay-fast {
    animation-delay: 0.8s !important;
}
@for $i from 1 through 10 {
    .tg-animate-delay-#{$i}s {
        animation-delay: #{$i}s !important;
    }
}


/* Duration classes */
.tg-animate-duration-faster {
    animation-duration: 0.5s !important;
}
.tg-animate-duration-fast {
    animation-duration: 0.8s !important;
}
@for $i from 1 through 10 {
    .tg-animate-duration-#{$i}s {
        animation-duration: #{$i}s !important;
    }
}

/* Count classes */
.tg-animate-count-infinite {
    animation-iteration-count: infinite !important;
}
@for $i from 0 through 10 {
    .tg-animate-count-#{$i} {
        animation-iteration-count: #{$i} !important;
    }
}


/*---- Beat animation ----*/
@keyframes tg-css_beat {
    0%, 100% {
        transform: scale(1);
    }
    50% {
        transform: scale(1.1);
    }
}

.tg-effect-beat {
    animation-name: tg-css_beat;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-iteration-count: 1;
}

.tg-effect-beat-hover:hover {
    @extend .tg-effect-beat;
}

.tg-animate-parent-hover:hover .tg-effect-beat-hover {
    @extend .tg-effect-beat;
    animation-play-state: running;
}




/*---- Beat-fade animation ----*/
@keyframes tg-css_beat-fade {
    0%, 100% {
        transform: scale(1);
        opacity: 1;
    }
    50% {
        transform: scale(1.1);
        opacity: 0.5;
    }
}

.tg-effect-beat_fade {
    animation-name: css_beat-fade;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-beat_fade-hover:hover {
    @extend .tg-effect-beat_fade;
}

.tg-animate-parent-hover:hover .tg-effect-beat_fade-hover {
    @extend .tg-effect-beat_fade;
    animation-play-state: running;
}



/* ---- Bounce animation ----*/
@keyframes tg-css_bounce {
    0%, 100% {
        transform: translateY(0);
    }
    50% {
        transform: translateY(-10px);
    }
}

.tg-effect-bounce {
    animation-name: tg-css_bounce;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-bounce-hover:hover {
    @extend .tg-effect-bounce;
}

.tg-animate-parent-hover:hover .tg-effect-bounce-hover {
    @extend .tg-effect-bounce;
    animation-play-state: running;
}




/*---- Fade animation ----*/
@keyframes tg-css_fade {
    0%, 100% {
        opacity: 1;
    }
    50% {
        opacity: 0.5;
    }
}

.tg-effect-fade {
    animation-name: tg-css_fade;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-fade-hover:hover {
    @extend .tg-effect-fade;
}

.tg-animate-parent-hover:hover .tg-effect-fade-hover {
    @extend .tg-effect-fade;
    animation-play-state: running;
}



/*---- Flip animation ----*/
@keyframes tg-css_flip {
    0%, 100% {
        transform: rotateY(0);
    }
    50% {
        transform: rotateY(180deg);
    }
}

.tg-effect-flip {
    animation-name: tg-css_flip;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-flip-hover:hover {
    @extend .tg-effect-flip;
}

.tg-animate-parent-hover:hover .tg-effect-flip-hover {
    @extend .tg-effect-flip;
    animation-play-state: running;
}



/*---- Shake animation ----*/
@keyframes tg-css_shake {
    0%, 100% {
        transform: translateX(0);
    }
    10%, 30%, 50%, 70%, 90% {
        transform: translateX(-10px);
    }
    20%, 40%, 60%, 80% {
        transform: translateX(10px);
    }
}

.tg-effect-shake {
    animation-name: tg-css_shake;
    animation-duration: 1s;
    animation-timing-function: cubic-bezier(.36,.07,.19,.97);
    animation-iteration-count: 1;
}

.tg-effect-shake-hover:hover {
    @extend .tg-effect-shake;
}

.tg-animate-parent-hover:hover .tg-effect-shake-hover {
    @extend .tg-effect-shake;
    animation-play-state: running;
}



/*---- Spin / rotating animation ----*/
@keyframes tg-css_spin {
    from {
        transform: rotate(0deg);
    }
    to {
        transform: rotate(360deg);
    }
}

.tg-effect-spin {
    animation-name: tg-css_spin;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-iteration-count: 1;
}

.tg-effect-spin-hover:hover {
    @extend .tg-effect-spin;
}

.tg-animate-parent-hover:hover .tg-effect-spin-hover {
    @extend .tg-effect-spin;
    animation-play-state: running;
}



/*---- Spin reverse animation ----*/
@keyframes tg-css_spin-reverse {
    0% {
        transform: rotate(0deg);
    }
    100% {
        transform: rotate(-360deg);
    }
}

.tg-effect-spin_reverse {
    animation-name: tg-css_spin-reverse;
    animation-duration: 1s;
    animation-timing-function: linear;
    animation-iteration-count: 1;
}

.tg-effect-spin_reverse-hover:hover {
    @extend .tg-effect-spin_reverse;
}

.tg-animate-parent-hover:hover .tg-effect-spin_reverse-hover {
    @extend .tg-effect-spin_reverse;
    animation-play-state: running;
}



/*---- Spin pulse animation ----*/
@keyframes tg-css_spin-pulse {
    0%, 100% {
        transform: rotate(0);
        opacity: 1;
    }
    50% {
        transform: rotate(180deg);
        opacity: 0.5;
    }
}

.tg-effect-spin_pulse {
    animation-name: tg-css_spin-pulse;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-spin_pulse-hover:hover {
    @extend .tg-effect-spin_pulse;
}

.tg-animate-parent-hover:hover .tg-effect-spin_pulse-hover {
    @extend .tg-effect-spin_pulse;
    animation-play-state: running;
}



/*---- Swing animation ----*/
@keyframes tg-css_swing {
    20% {
        transform: rotate3d(0, 0, 1, 15deg);
    }
    40% {
        transform: rotate3d(0, 0, 1, -10deg);
    }
    60% {
        transform: rotate3d(0, 0, 1, 5deg);
    }
    80% {
        transform: rotate3d(0, 0, 1, -5deg);
    }
    to {
        transform: rotate3d(0, 0, 1, 0deg);
    }
}

.tg-effect-swing {
    animation-name: tg-css_swing;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-swing-hover:hover {
    @extend .tg-effect-swing;
}

.tg-animate-parent-hover:hover .tg-effect-swing-hover {
    @extend .tg-effect-swing;
    animation-play-state: running;
}



/*---- jello animation ----*/
@keyframes tg-css_jello {
    from,
    11.1%,
    to {
        transform: translate3d(0, 0, 0);
    }

    22.2% {
        transform: skewX(-12.5deg) skewY(-12.5deg);
    }

    33.3% {
        transform: skewX(6.25deg) skewY(6.25deg);
    }

    44.4% {
        transform: skewX(-3.125deg) skewY(-3.125deg);
    }

    55.5% {
        transform: skewX(1.5625deg) skewY(1.5625deg);
    }

    66.6% {
        transform: skewX(-0.78125deg) skewY(-0.78125deg);
    }

    77.7% {
        transform: skewX(0.390625deg) skewY(0.390625deg);
    }

    88.8% {
        transform: skewX(-0.1953125deg) skewY(-0.1953125deg);
    }
}

.tg-effect-jello {
    animation-name: tg-css_jello;
    transform-origin: center;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-jello-hover:hover {
    @extend .tg-effect-jello;
}

.tg-animate-parent-hover:hover .tg-effect-jello-hover {
    @extend .tg-effect-jello;
    animation-play-state: running;
}




/*---- rubberBand animation ----*/
@keyframes tg-css_rubberBand {
    from {
        transform: scale3d(1, 1, 1);
    }

    30% {
        transform: scale3d(1.25, 0.75, 1);
    }

    40% {
        transform: scale3d(0.75, 1.25, 1);
    }

    50% {
        transform: scale3d(1.15, 0.85, 1);
    }

    65% {
        transform: scale3d(0.95, 1.05, 1);
    }

    75% {
        transform: scale3d(1.05, 0.95, 1);
    }

    to {
        transform: scale3d(1, 1, 1);
    }
}

.tg-effect-rubberBand {
    animation-name: tg-css_rubberBand;
    transform-origin: center;
    animation-duration: 1s;
    animation-iteration-count: 1;
}

.tg-effect-rubberBand-hover:hover {
    @extend .tg-effect-rubberBand;
}

.tg-animate-parent-hover:hover .tg-effect-rubberBand-hover {
        @extend .tg-effect-rubberBand;
    animation-play-state: running;
}